#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#define MEMORY_SIZE 32

typedef struct Memory {
    int fill_position;
    int mem_size;
}memory;

int init_buddy(int *mem, int size) {
    memset(mem,0,sizeof(int)*size);
    return 0;
}
int get_empty_position(int *mem, int size, int mem_size) {
    int count = mem_size / 2;
    int first_empty_point = 0;
    bool is_first = true;
    for (int i = 0; i < size; i+=2) {
        if (mem[i] == 0 && mem[i + 1] == 0) {
            if (is_first) {
                first_empty_point = i;
                is_first = false;
            }
            count--;
            if(count == 0) {
                return first_empty_point;
            }
        }
    }
    return -1;
}

int fill_mem(int *mem,  int mem_size, int fill_position) {
    int limit = fill_position + mem_size;
    for(int i = fill_position; i < limit; i++) {
        mem[i] = 1;
    }
    return 0;
}

int borrow_mem(int *mem, int size, int mem_size) {
    int fill_position = get_empty_position(mem, size, mem_size);
    if(fill_position == -1) {
        return -1;
    }
    fill_mem(mem,mem_size,fill_position);
    return fill_position;
}

int return_mem(int *mem, int fill_position, int mem_size) {
    int limit = fill_position + mem_size;
    for(int i = fill_position; i <  limit; i++) {
        mem[i] = 0;
    }
    return 0;
}

int main(void) {
    int mem[MEMORY_SIZE];
    init_buddy(mem,32);
    memory mem_1;
    mem_1.mem_size = 3;
    mem_1.fill_position = borrow_mem(mem,32,mem_1.mem_size);
    printf("%d\n",mem_1.fill_position);
    memory mem_2;
    mem_2.mem_size = 4;
    mem_2.fill_position = borrow_mem(mem,32,mem_2.mem_size);
    printf("%d\n",mem_2.fill_position);
    memory mem_3;
    mem_3.mem_size = 5;
    mem_3.fill_position = borrow_mem(mem,32,mem_3.mem_size);
    printf("%d\n",mem_3.fill_position);

    for(int i =0; i <MEMORY_SIZE; i++) {
        printf("%d ",mem[i]);
    }
    printf("\n");

    return_mem(mem,mem_1.fill_position,mem_1.mem_size);
    return_mem(mem,mem_2.fill_position,mem_2.mem_size);
    return_mem(mem,mem_3.fill_position,mem_3.mem_size);

    for(int i =0; i <MEMORY_SIZE; i++) {
        printf("%d ",mem[i]);
    }
    printf("\n");

    return 0;

}
