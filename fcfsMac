#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int totalWorkingTime = 0;
int madePid[100] = {-1,};
int pcbNum = 0;

typedef struct process {
    int processId;
    int priority;
    void (*pcFunction)(int pid);
} process;

typedef struct PCB {
    process *process;
    int CID;
    int CCID;
    int PCID;
} pcb;

typedef struct Scheduler {
    struct Scheduler *next;
    int runningTime;
    pcb *pcb;
}scheduler;

pcb pcbList[100];

scheduler *head;
scheduler *tail;

void executing(int pid);

process *makeProcess() {
    static int j = 0;
    int i = 0;
    int pid = rand() % 100;

    while (madePid[i] != -1) {
        if (madePid[i] == pid) {
            pid = rand() % 100;
            i = 0;
        }
        i++;
    }
    madePid[i] = pid;

    process *temp = malloc(sizeof(process));
    temp->processId = pid;
    temp->priority = j++;
    temp->pcFunction = executing;
    return temp;
}

pcb *runProgram() {
    pcb *temp = malloc(sizeof(pcb));
    temp->process = makeProcess();
    temp->CID = -1;
    temp->CCID = -1;
    temp->PCID = -1;
    pcbList[pcbNum++] = *temp;
    return &pcbList[pcbNum - 1];
}

pcb *findPcb(int pid) {
    for (int i = 0; i < pcbNum; i++) {
        if (pcbList[i].process != NULL && pcbList[i].process->processId == pid) {
            return &pcbList[i];
        }
    }
    return NULL;
}

int fork(pcb *processBlock) {
    if (processBlock->CID != -1 && processBlock->CCID != -1) {
        pcb *temp = findPcb(processBlock->CID);
        if (temp != NULL) {
            return fork(temp);
        }
    }
    if (processBlock->CID == -1) {
        pcb *newPcb = malloc(sizeof(pcb));
        newPcb->process = makeProcess();
        newPcb->process->processId = pcbNum;
        newPcb->PCID = processBlock->process->processId;
        newPcb->CID = -1;
        newPcb->CCID = -1;
        processBlock->CID = newPcb->process->processId;
        pcbList[pcbNum++] = *newPcb;
        return newPcb->process->processId;
    }

    pcb *newPcb = malloc(sizeof(pcb));
    newPcb->process = makeProcess();
    newPcb->process->processId = pcbNum;
    newPcb->PCID = processBlock->process->processId;

    if (processBlock->CID != -1) {
        processBlock->CCID = newPcb->process->processId;
    } else {
        processBlock->CID = newPcb->process->processId;
    }
    pcbList[pcbNum++] = *newPcb;

    pcb *parentCopy = malloc(sizeof(pcb));
    parentCopy->process = makeProcess();
    parentCopy->process->processId = pcbNum;
    parentCopy->PCID = processBlock->process->processId;
    parentCopy->CID = -1;
    parentCopy->CCID = -1;
    pcbList[pcbNum++] = *parentCopy;

    if (processBlock->CID != -1) {
        pcb *childPcb = findPcb(processBlock->CID);
        if (childPcb != NULL) {
            pcb *childCopy = malloc(sizeof(pcb));
            childCopy->process = makeProcess();
            childCopy->process->processId = pcbNum;
            childCopy->PCID = childPcb->process->processId;
            childCopy->CID = -1;
            childCopy->CCID = -1;
            pcbList[pcbNum++] = *childCopy;
        }
    }
    return newPcb->process->processId;
}

void executing(int pid) {
    for (int i = 0; i < pcbNum; i++) {
        if (pcbList[i].process != NULL && pcbList[i].process->processId == pid) {
            printf("PID=%d, is now working\n", pid);
            free(pcbList[i].process);  // Free the process struct
            pcbList[i].process = NULL;  // Set the pointer to NULL
            return;
        }
    }
}

void insertScheduler(pcb *processBlock) {
    scheduler *temp = malloc(sizeof(scheduler));
    temp->next = NULL;
    temp->runningTime = rand() % 3 + 1;
    temp->pcb = processBlock;
    if (head == NULL) {
        head = temp;
        tail = temp;
    } else {
        tail->next = temp;
        tail = temp;
    }
}

void clearScheduler(scheduler *root) {
    while (root) {
        scheduler *temp = root;
        totalWorkingTime += root->runningTime;
        printf("Working Time is %d seconds, Total = %d seconds\n", root->runningTime, totalWorkingTime);
        executing(root->pcb->process->processId);
        root = root->next;
        free(temp);
    }
}

int main(void) {
    srand(time(NULL));
    pcb *parent = runProgram();
    printf("Parent PID: %d\t", parent->process->processId);

    int childPid = fork(parent);
    printf("Forked Child PID: %d\t", childPid);

    int cchildPid = fork(findPcb(parent->process->processId));
    printf("Forked CChild PID: %d\t", cchildPid);

    int ccchildPid = fork(findPcb(parent->process->processId));
    printf("Forked CCChild PID: %d\t", ccchildPid);

    int childchildPid = fork(findPcb(parent->process->processId));
    printf("Forked ChildChild PID: %d\t\n", childchildPid);

    for (int i = 0; i < pcbNum; i++) {
        if (pcbList[i].process != NULL) {
            printf("PCB[%d] PID: %d\t", i, pcbList[i].process->processId);
        } else {
            printf("PCB[%d] PID: NULL (Process terminated)\n", i);
        }
    }
    printf("\n");

    for (int i = 0; i < pcbNum; i++) {
        if (pcbList[i].process != NULL) {
            insertScheduler(&pcbList[i]);
        }
    }

    clearScheduler(head);
    printf("The Average Working Time is = %d", totalWorkingTime / pcbNum);

    return 0;
}
