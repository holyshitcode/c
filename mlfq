#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 10
#define MAX_LEVELS 3

typedef struct {
    int pid;
    int arrival_time;
    int burst_time;
    int remaining_time;
    int start_time;
    int end_time;
    int wait_time;
    int turn_around_time;
} Process;

typedef struct Node {
    Process process;
    struct Node* next;
} Node;

typedef struct {
    Node* front;
    Node* rear;
} Queue;

void initQueue(Queue* q);
int isEmpty(Queue* q);
void enqueue(Queue* q, Process p);
Process dequeue(Queue* q);
void printProcessStats(Process* processes, int n);
void mlfq(Process* processes, int n);

int main() {
    Process processes[MAX_PROCESSES] = {
        {1, 0, 6, 6, -1, -1, 0, 0},
        {2, 1, 4, 4, -1, -1, 0, 0},
        {3, 2, 3, 3, -1, -1, 0, 0},
        {4, 3, 5, 5, -1, -1, 0, 0},
        {5, 4, 6, 6, -1, -1, 0, 0},
       {6, 5, 7, 7, -1, -1, 0, 0},
         {7, 6, 8, 8, -1, -1, 0, 0},
        {8, 7, 9, 9, -1, -1, 0, 0}

    };
    int n = 8;
    mlfq(processes, n);
    return 0;
}

void initQueue(Queue* q) {
    q->front = q->rear = NULL;
}

int isEmpty(Queue* q) {
    return (q->front == NULL);
}

void enqueue(Queue* q, Process p) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->process = p;
    newNode->next = NULL;
    if (q->rear == NULL) {
        q->front = q->rear = newNode;
        return;
    }
    q->rear->next = newNode;
    q->rear = newNode;
}

Process dequeue(Queue* q) {
    if (isEmpty(q)) {
        Process nullProcess = {-1, -1, -1, -1, -1, -1, -1, -1};
        return nullProcess;
    }
    Node* temp = q->front;
    Process p = temp->process;
    q->front = q->front->next;
    if (q->front == NULL) {
        q->rear = NULL;
    }
    free(temp);
    return p;
}

void mlfq(Process* processes, int n) {
    Queue queues[MAX_LEVELS];
    for (int i = 0; i < MAX_LEVELS; i++) {
        initQueue(&queues[i]);
    }

    for (int i = 0; i < n; i++) {
        enqueue(&queues[0], processes[i]);
    }

    int time = 0;
    int completed = 0;
    while (completed < n) {
        for (int i = 0; i < MAX_LEVELS; i++) {
            if (!isEmpty(&queues[i])) {
                Process p = dequeue(&queues[i]);
                if (p.start_time == -1) {
                    p.start_time = time;
                }

                int execution_time = (p.remaining_time > 2) ? 2 : p.remaining_time;
                p.remaining_time -= execution_time;
                time += execution_time;

                if (p.remaining_time == 0) {
                    p.end_time = time;
                    p.turn_around_time = p.end_time - p.arrival_time;
                    p.wait_time = p.turn_around_time - p.burst_time;
                    processes[p.pid - 1] = p;
                    completed++;
                    printf("프로세스 %d 종료 (큐: %d)\n", p.pid, i);
                } else {
                    if (i < MAX_LEVELS - 1) {
                        printf("프로세스 %d를 큐 %d에서 큐 %d로 이동 (남은 실행 시간: %d)\n", p.pid, i, i + 1, p.remaining_time);
                        enqueue(&queues[i + 1], p);
                    } else {
                        printf("프로세스 %d를 큐 %d에서 큐 %d로 재배치 (남은 실행 시간: %d)\n", p.pid, i, i, p.remaining_time);
                        enqueue(&queues[i], p);
                    }
                }
                break;
            }
        }
    }

    printProcessStats(processes, n);
}

void printProcessStats(Process* processes, int n) {
    printf("PID\tArrival\tBurst\tStart\tEnd\tWait\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("%-7d\t%-7d\t\t%-7d\t%-7d\t%-7d\t%-7d\t%d\n",
               processes[i].pid,
               processes[i].arrival_time,
               processes[i].burst_time,
               processes[i].start_time,
               processes[i].end_time,
               processes[i].wait_time,
               processes[i].turn_around_time);
    }
}

/**
 * MLFQ - 여러개의 큐에 다른 스케쥴링 방식과함께 실행될수록 낮은 단계로 배치되어 최하위큐에서는 FCFS와
 * 비슷하게 동작할수있는 다중큐방식입니다.
 * 현재코드에서는 2초를 실행한후에 잔여시간이 0초가되면 종료 아닐시에 하위큐로 이동시킵니다.
 * 최종적으로 모든시간을 소모하게되면 종료됩니다.
 * 우선순위에의해서 각큐간의 이동이 가능하여 유연한 실행이 가능하고 다중큐의 장점인
 * 여러가지 정책을 적용할수있다는 장점을 가져 어떤 프로그램을 스케쥴하던 사용할수있는 좋은
 * 알고리즘 인거같습니다. 단점으로는 구현이 까다롭습니다.
 * 구현하면서 어려웠던점은 실제로 작동하는거처럼 타임슬라이스단위로 하위레벨큐로 내려가게 하는 작업을
 * 구현하는게 많이 어려웠습니다. 또한 실시간으로 작동하는 상황을 묘사하지못한게 아쉽습니다.
 *
 */
